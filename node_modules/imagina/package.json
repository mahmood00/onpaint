{
  "name": "imagina",
  "description": "Imagina - node.js image library wrapper of ImageMagick",
  "version": "0.1.4",
  "author": {
    "name": "Eduardo Nunes",
    "email": "esnunes@gmail.com"
  },
  "keywords": [
    "image",
    "imagemagick",
    "resize",
    "batch",
    "convert"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/esnunes/imagina/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/esnunes/imagina.git"
  },
  "bugs": {
    "url": "https://github.com/esnunes/imagina/issues"
  },
  "main": "lib/imagina.js",
  "dependencies": {
    "async": "~0.2.9"
  },
  "readme": "\n# Imagina\n\nImagina is a [node.js](http://nodejs.org) image library wrapper of [ImageMagick](http://www.imagemagick.org/). Its features include **resize**, **resizeBatch** and **convert**.\n\nImagina uses [async queue](https://github.com/caolan/async#queue) to assure server's resources wont get overloaded, spawning configurable maximum number of ImageMagick processes in parallel. Imagina keeps track of all running and queued resizes / converts, if user tries to resize the same file to the same destination using the same parameters and resolution Imagina will put the second call on hold and will automatically call its callback when the first one finishes. This is particulary useful when Imagina is used inside HTTP requests, avoiding concurrent users spawn lots of ImageMagick processes to do the same job.\n\nImagina requires knowledge of ImageMagick convert command line options, for more information check out [ImageMagick: Command-line Options](http://www.imagemagick.org/script/command-line-options.php).\n\n> Recently released [imagina-middleware](https://github.com/esnunes/imagina-middleware) - Express middleware to dynamically resize images.\n\n## Install\n\nImagina is available on [npmjs](https://npmjs.org/package/imagina). To add Imagina to you application on a Terminal run:\n```bash \nnpm install --save imagina\n```\n\nImagina requires ImageMagick convert command-line tool. It is also recommended to install libjpeg and libpng if you want to deal with these two image file formats.\n\n### Mac OS X\nThe easiest way of installing ImageMagick with PNG and JPEG support is installing [brew](http://brew.sh/) and running on Terminal:\n```bash\nbrew install libpng libjpeg imagemagick\n```\nThe command above will install ImageMagick convert command-line tool with support to PNG and JPEG image formats.\n\n## Examples\n\n### resize\n```js\nvar Imagina = require('imagina');\n\nvar im = new Imagina();\n\nvar src = '/path/to/myfile.png';\nvar dst = '/another/path/output.png';\nvar params = '-auto-orient -quality 70'.split(' ');\n\nim.resize(src, dst, '800x600', params, function(err) {\n  console.log('image resized');\n});\n```\n\n### resizeBatch\n```js\nvar Imagina = require('imagina');\n\nvar im = new Imagina({ workers: 4 });\n\n// considering src = 'nodejs.png', resolution = '800x600', dst will \n// be: 'nodejs-800x600.jpg'\nvar filenameModifier = function(src, resolution, params) {\n  return src.replace(/(.*)\\.png$/, '$1-' + resolution + '.jpg');  \n};\n\nvar params = '-auto-orient -quality 70'.split(' ');\nvar resolutions = ['800x500', '320x240', '800x600', '128x128', '1024x768'];\n\nim.resizeBatch('nodejs.png', filenameModifier, resolutions, params, function(err) {\n  console.log('resizeBatch finished');\n});\n```\n\n### convert\n```js\nvar Imagina = require('imagina');\n\nvar im = new Imagina();\n\nim.convert('myfile.png', 'myfile.jpg', function(err) {\n  console.log('conversion finished');\n});\n```\n\n## API\n\n### Imagina (constructor)\nIt is recommended to have only one Imagina instance per application instance. Creating only one instance of Imagina you get the following benefits:\n\n* Optimized for the number of available cores on computer;\n* Avoid parallel resize or convert of the same file / destination / resolution / params;\n\nAlthough Imagina identifies the number of available cores on computer and sets it as the maximum number of processes in parallel the user can configure this number adding an object to Imagina constructor arguments like this:\n```js\nvar im = new Imagina({ workers: 3 });\n```\nIn case it is not informed, Imagina defaults to ```os.cpus().length```.\n\nIn addition to **workers** it is possible to add default **params**.\n```js\nvar im = new Imagina({ params: '-quality 80'.split(' ') });\n```\n\n### resize\nAs its name says this method must be used to resize one image.\n```js\n  Imagina.prototype.resize = function(src, dst, resolution, params, cb) {};\n```\n\n* **src** (string) path to source file;\n* **dst** (string or function) path to destination file. In case a function is defined this function ```function(src, resolution, params) {}``` must return the destination path;\n* **resolution** (string) resolution defined by the following format **WIDTH**x**HEIGHT** e.g. ```'800x600'```;\n* **params** (array, optional) ImageMagick additional params. In case ```null``` is defined Imagina will default to ```params``` defined on constructor or empty array in case it doesn't exist;\n* **cb** (function, optional) callback to be called when resize finishes;\n\n**params** has a special behavior on Imagina. Imagina tries to find ```{RESOLUTION}``` token in all elements of ```params``` array, in case it finds Imagina replaces ```{RESOLUTION}``` to the resolution given as argument.\n```js\nvar params = '-quality 80 -crop {RESOLUTION}+0+0'.split(' ');\n```\nIn the example above, considering resolution ```'800x600'``` Imagina will replace parameter ```'{RESOLUTION}+0+0'``` by ```'800x600+0+0'```, this feature is highly useful on ImageMagick.\n\nIf Imagina doesn't find a params element equals to ```'-resize'``` it will automatically add two arguments to ImageMagick convert command-line call: ```['-resize', '{RESOLUTION}']```. That's why you don't need to add ```'-resize'``` to **params**.\n```js\nvar params = '-quality 90 -resize {RESOLUTION}>'.split(' ');\nim.resize('myfile.png', 'myfile.jpg', '800x600', params);\n```\n\n### resizeBatch\nresizeBatch works very similar to [resize](#resize), there are only two differences: \n\n* ```dst``` (function) must be a function, otherwise Imagina will resize ```src``` image to the same ```dst``` path having an  unpredictable behavior.\n* ```resolutions``` (array) instead of beeing able to resize one image to only one resolution resizeBatch allows you to resize a ```src``` image to many ```resolutions```\n\n### convert\nAs its name says this method converts image format using filename extensions.\n\n* **src** (string) path to source file;\n* **dst** (string) path to destination file;\n* **cb** (function, optional) callback to be called when convert finishes;\n\n```js\nim.convert('myfile.png', 'myfile.jpg');\n```\n\n## TODO\n* Add detailed error feedback;\n* Add support to windows computer (at the moment due to use of **mv** command-line tool it is compatible only with UNIX based OS i.e. MacOSX, Linux, BSD, etc)\n\n## Contributors\nWould you like to contribute to this library? Don't be shy! [Contact me](mailto:esnunes@gmail.com) if you are interested on it.\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Eduardo Nunes <esnunes@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/esnunes/imagina",
  "_id": "imagina@0.1.4",
  "dist": {
    "shasum": "5be86ec6497d4313cb77241e8904f569d005c612"
  },
  "_from": "imagina@",
  "_resolved": "https://registry.npmjs.org/imagina/-/imagina-0.1.4.tgz"
}
